AWSTemplateFormatVersion: 2010-09-09
Parameters:
  ProjectName:
    Description: The same mame of the project (lowercase and under ten characters without number)
    Type: String
    AllowedPattern: "^[a-z]{0,10}$"
    ConstraintDescription: Must be lowercase and under ten characters (no numbers allowed)
  AssetsBucketName:
    Type: String
    Description: The S3 bucket name in the secondary region created in S3 replication (eg.arc309-ireland-bookstore-region2)
    AllowedPattern: "^[a-z0-9-]{3,53}$"
    ConstraintDescription: Must be between 3 and 53 characters (lowercase, numbers or -)
  bookstoreVPC:
    Type: String
    Description: VPC ID of Secondary Region (eg. vpc-xxx)
  bookstoreSubnet1:
    Type: String
    Description: Subnet ID for Elasticache (eg. subnet-0c1bdeabbd1e7cf19)
  OrderTableStreamARN:
    Type: String
    Description: DynamoDB Stream ARN
  UserPool:
    Type: String
    Description: Congnito in Primary region UserPool Arn
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "Configuration"
        Parameters: 
          - ProjectName
          - AssetsBucketName
          - bookstoreVPC
          - bookstoreSubnet1
          - AssetsCDN
          - OrderTableStreamARN
          - UserPool

Conditions:
  IADRegion: !Equals [!Ref "AWS::Region", "us-east-1"]
Mappings:
  S3Buckets:
    ap-southeast-1:
      Bucket: arc309-bookstore-ap-southeast-1
      SeederFunctionBucket: arc309-aws-wildrydes-ap-southeast-1
    eu-west-1:
      Bucket: arc309-bookstore-eu-west-1
      SeederFunctionBucket: arc309-aws-wildrydes-eu-west-1
  Constants:
    S3Keys:
      ListOrdersCode: functions/ListOrders.zip
      GetBookCode: functions/GetBook.zip
      ListBooksCode: functions/ListBooks.zip
      UpdateCartCode: functions/UpdateCart.zip
      GetCartItemCode: functions/GetCartItem.zip
      ListItemsInCartCode: functions/ListItemsInCart.zip
      AddToCartCode: functions/AddToCart.zip
      RemoveFromCartCode: functions/RemoveFromCart.zip
      GetBestSellersCode: functions/GetBestSellers.zip
      CheckoutCode: functions/Checkout.zip
      UploadBooksCode: functions/UploadBooks.zip
      UpdateBestSellersCode: functions/UpdateBestSellers.zip
      booksData: data/books.json
      UpdateConfigCode: functions/UpdateConfig.zip
      SeederFunctionCode: aws-serverless-codecommit-seeder.zip
      GetTruthCode: functions/myregion.zip
Resources:
# ---------- VPC - SUBNET - SECURITY GROUPS  ---------

  bookstoreSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub '${ProjectName}-SG'
      GroupDescription: Lock cache down to webserver access only
      VpcId: !Ref bookstoreVPC

  redisLambdaSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId:
        Ref: bookstoreVPC
      GroupDescription: "A component security group allowing access only to redis"  

  bookstoreCacheSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Elasticache security group
      SecurityGroupIngress:
        -
          IpProtocol: "tcp"
          FromPort: "6379"
          ToPort: "6379"
          SourceSecurityGroupId:
            Ref: redisLambdaSecurityGroup
      VpcId: !Ref bookstoreVPC

  bookstoreCacheSubnets:
    Type: 'AWS::ElastiCache::SubnetGroup'
    Properties:
      Description: Subnets for ElastiCache
      SubnetIds:
        - Ref: bookstoreSubnet1        

# ---------- ROLES FOR DYNAMODB ---------
  DynamoDbRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectName}-DynamoDbLambda2'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess'
      Policies:
        - PolicyName: PutRidePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateTable'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:DeleteItem'
                Resource: '*'

# ---------- ROLES FOR ELASTICACHE ---------  
  RedisRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectName}-RedisRole2'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonElastiCacheFullAccess'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - 'arn:aws:iam::aws:policy/AWSLambdaInvocation-DynamoDB'

# ---------- ELASTICACHE DEFINITIONS ---------         
  ElastiCacheCluster:
    DependsOn: 
     - bookstoreCacheSubnets
     - bookstoreCacheSecurityGroup
    Type: 'AWS::ElastiCache::CacheCluster'
    Properties:
      ClusterName: !Sub '${ProjectName}-cluster'
      CacheNodeType: cache.t2.micro
      NumCacheNodes: '1'
      Engine: redis
      CacheSubnetGroupName: !Ref bookstoreCacheSubnets
      VpcSecurityGroupIds:
        - Fn::GetAtt:
          - bookstoreCacheSecurityGroup
          - 'GroupId'
        
# ---------- LAMBDA STREAMING FUNCTIONS ---------      
  FunctionUpdateBestSellers:
    Type: 'AWS::Lambda::Function'
    DependsOn:
      - RedisRole
      - ElastiCacheCluster
      # - TOrders
    Properties:
      FunctionName: !Sub '${ProjectName}-UpdateBestSellers'
      Description: 'Updates BestSellers as orders are placed'
      Handler: index.handler
      Role: !GetAtt 
        - RedisRole
        - Arn
      Runtime: nodejs10.x
      Timeout: '60'
      VpcConfig:
        SecurityGroupIds:
          - Ref: redisLambdaSecurityGroup
        SubnetIds: 
          - Ref: bookstoreSubnet1
      Code:
        S3Bucket: !FindInMap 
          - S3Buckets
          - !Ref 'AWS::Region'
          - Bucket
        S3Key: !FindInMap 
          - Constants
          - S3Keys
          - UpdateBestSellersCode
      Environment:
        Variables:
          URL: !GetAtt 
            - ElastiCacheCluster
            - RedisEndpoint.Address 

 # ----------  STREAMING TRIGGERS ---------                     
  OrderTableStream:
    Type: 'AWS::Lambda::EventSourceMapping'
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !Sub '${OrderTableStreamARN}'
      FunctionName: !GetAtt 
        - FunctionUpdateBestSellers
        - Arn
      StartingPosition: TRIM_HORIZON   

# ---------- LAMBDA for DYNAMODB FUNCTIONS ---------         
  FunctionListOrders:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-ListOrders'
      Description: Get list of books ordered by customerId
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs10.x
      Role: !GetAtt 
        - DynamoDbRole
        - Arn
      Timeout: 120
      Environment:
        Variables:
          TABLE_NAME: !Sub '${ProjectName}-Orders'
      Code:
        S3Bucket: !FindInMap 
          - S3Buckets
          - !Ref 'AWS::Region'
          - Bucket
        S3Key: !FindInMap 
          - Constants
          - S3Keys
          - ListOrdersCode
  FunctionGetBook:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-GetBook'
      Description: Get book by id
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs10.x
      Role: !GetAtt 
        - DynamoDbRole
        - Arn
      Timeout: 120
      Environment:
        Variables:
          TABLE_NAME: !Sub '${ProjectName}-Books'
      Code:
        S3Bucket: !FindInMap 
          - S3Buckets
          - !Ref 'AWS::Region'
          - Bucket
        S3Key: !FindInMap 
          - Constants
          - S3Keys
          - GetBookCode
  FunctionListBooks:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-ListBooks'
      Description: Get list of books by category
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs10.x
      Role: !GetAtt 
        - DynamoDbRole
        - Arn
      Timeout: 120
      Environment:
        Variables:
          TABLE_NAME: !Sub '${ProjectName}-Books'
      Code:
        S3Bucket: !FindInMap 
          - S3Buckets
          - !Ref 'AWS::Region'
          - Bucket
        S3Key: !FindInMap 
          - Constants
          - S3Keys
          - ListBooksCode
  FunctionUpdateCart:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-UpdateCart'
      Description: Update Customer's cart
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs10.x
      Role: !GetAtt 
        - DynamoDbRole
        - Arn
      Timeout: 120
      Environment:
        Variables:
          TABLE_NAME: !Sub '${ProjectName}-Cart'
      Code:
        S3Bucket: !FindInMap 
          - S3Buckets
          - !Ref 'AWS::Region'
          - Bucket
        S3Key: !FindInMap 
          - Constants
          - S3Keys
          - UpdateCartCode
  FunctionGetCartItem:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-GetCartItem'
      Description: Get item in cart by customer and book id
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs10.x
      Role: !GetAtt 
        - DynamoDbRole
        - Arn
      Timeout: 120
      Environment:
        Variables:
          TABLE_NAME: !Sub '${ProjectName}-Cart'
      Code:
        S3Bucket: !FindInMap 
          - S3Buckets
          - !Ref 'AWS::Region'
          - Bucket
        S3Key: !FindInMap 
          - Constants
          - S3Keys
          - GetCartItemCode
  FunctionListItemsInCart:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-ListOrdersInCart'
      Description: Get list of items in cart
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs10.x
      Role: !GetAtt 
        - DynamoDbRole
        - Arn
      Timeout: 120
      Environment:
        Variables:
          TABLE_NAME: !Sub '${ProjectName}-Cart'
      Code:
        S3Bucket: !FindInMap 
          - S3Buckets
          - !Ref 'AWS::Region'
          - Bucket
        S3Key: !FindInMap 
          - Constants
          - S3Keys
          - ListItemsInCartCode
  FunctionAddToCart:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-AddToCart'
      Description: Add a book to cart
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs10.x
      Role: !GetAtt 
        - DynamoDbRole
        - Arn
      Timeout: 120
      Environment:
        Variables:
          TABLE_NAME: !Sub '${ProjectName}-Cart'
      Code:
        S3Bucket: !FindInMap 
          - S3Buckets
          - !Ref 'AWS::Region'
          - Bucket
        S3Key: !FindInMap 
          - Constants
          - S3Keys
          - AddToCartCode
  FunctionRemoveFromCart:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-RemoveFromCart'
      Description: Remove a book from cart
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs10.x
      Role: !GetAtt 
        - DynamoDbRole
        - Arn
      Timeout: 120
      Environment:
        Variables:
          TABLE_NAME: !Sub '${ProjectName}-Cart'
      Code:
        S3Bucket: !FindInMap 
          - S3Buckets
          - !Ref 'AWS::Region'
          - Bucket
        S3Key: !FindInMap 
          - Constants
          - S3Keys
          - RemoveFromCartCode
  FunctionCheckout:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-Checkout'
      Description: Get list of books ordered by customerId
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs10.x
      Role: !GetAtt 
        - DynamoDbRole
        - Arn
      Timeout: 120
      Environment:
        Variables:
          ORDERS_TABLE: !Sub '${ProjectName}-Orders'
          CART_TABLE: !Sub '${ProjectName}-Cart'
      Code:
        S3Bucket: !FindInMap 
          - S3Buckets
          - !Ref 'AWS::Region'
          - Bucket
        S3Key: !FindInMap 
          - Constants
          - S3Keys
          - CheckoutCode
  FunctionUploadBooks:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-UploadBooks'
      Description: Upload sample data for books
      Handler: index.handler
      Runtime: nodejs10.x
      Role: !GetAtt 
        - DynamoDbRole
        - Arn
      Timeout: 120
      Environment:
        Variables:
          TABLE_NAME: !Sub '${ProjectName}-Books'
          S3_BUCKET: !FindInMap 
                    - S3Buckets
                    - !Ref 'AWS::Region'
                    - Bucket
          FILE_NAME: !FindInMap 
                    - Constants
                    - S3Keys
                    - booksData
      Code:
        S3Bucket: !FindInMap 
          - S3Buckets
          - !Ref 'AWS::Region'
          - Bucket
        S3Key: !FindInMap 
          - Constants
          - S3Keys
          - UploadBooksCode

# ---------- LAMBDA FUNCTIONS for ELASTICACHE  ---------          
  FunctionGetBestSellers:
    Type: 'AWS::Lambda::Function'
    DependsOn:
      - RedisRole
      - ElastiCacheCluster
    Properties:
      FunctionName: !Sub '${ProjectName}-GetBestSellers'
      Description: Get the top 20 best selling books from ElastiCache
      Handler: index.handler
      MemorySize: 256
      Role: !GetAtt
        - RedisRole
        - Arn
      Runtime: nodejs10.x
      Timeout: '60'
      VpcConfig:
        SecurityGroupIds:
          - Ref: redisLambdaSecurityGroup
        SubnetIds:
          - Ref: bookstoreSubnet1
      Code:
        S3Bucket: !FindInMap 
          - S3Buckets
          - !Ref 'AWS::Region'
          - Bucket
        S3Key: !FindInMap 
          - Constants
          - S3Keys
          - GetBestSellersCode
      Environment:
        Variables:
          URL: !GetAtt 
            - ElastiCacheCluster
            - RedisEndpoint.Address          
  
 # ---------- LAMBDA PERMISSIONS ---------    
  FunctionListOrdersPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref FunctionListOrders
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref AppApi
          - /*
  FunctionGetBookPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref FunctionGetBook
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref AppApi
          - /*
  FunctionListBooksPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref FunctionListBooks
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref AppApi
          - /*
  FunctionUpdateCartPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref FunctionUpdateCart
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref AppApi
          - /*
  FunctionGetCartItemPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref FunctionGetCartItem
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref AppApi
          - /*
  FunctionListItemsInCartPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref FunctionListItemsInCart
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref AppApi
          - /*
  FunctionAddToCartPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref FunctionAddToCart
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref AppApi
          - /*
  FunctionRemoveFromCartPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref FunctionRemoveFromCart
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref AppApi
          - /*
  FunctionCheckoutPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref FunctionCheckout
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref AppApi
          - /*
  FunctionGetBestSellersPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref FunctionGetBestSellers
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref AppApi
          - /*
  FunctionGetTruthPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref FunctionGetTruth
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref AppApi
          - /*

 # ---------- API GATEWAY ---------         
  AppApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Sub '${ProjectName}-Bookstore'
      Description: API used for Bookstore requests
      FailOnWarnings: true
  BooksApiRequestGET:
    DependsOn:
      - FunctionListOrdersPermissions
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - FunctionListBooks
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      RequestParameters:
        method.request.querystring.category: false
      ResourceId: !Ref BooksApiResource
      RestApiId: !Ref AppApi
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
  BooksApiRequestOPTIONS:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ResourceId: !Ref BooksApiResource
      RestApiId: !Ref AppApi
      AuthorizationType: None
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
  BookItemApiRequestGET:
    DependsOn: FunctionGetBookPermissions
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - FunctionGetBook
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: $input.json('$.body')
      RequestParameters:
        method.request.path.id: true
      ResourceId: !Ref BookItemApiResource
      RestApiId: !Ref AppApi
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
  BookItemApiRequestOPTIONS:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ResourceId: !Ref BookItemApiResource
      RestApiId: !Ref AppApi
      AuthorizationType: None
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
  OrdersApiRequestGET:
    DependsOn: FunctionListOrdersPermissions
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - FunctionListOrders
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      ResourceId: !Ref OrdersApiResource
      RestApiId: !Ref AppApi
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
  OrdersApiRequestPOST:
    DependsOn: FunctionCheckoutPermissions
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - FunctionCheckout
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      ResourceId: !Ref OrdersApiResource
      RestApiId: !Ref AppApi
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
  OrdersApiRequestOPTIONS:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ResourceId: !Ref OrdersApiResource
      RestApiId: !Ref AppApi
      AuthorizationType: None
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
  CartApiRequestGET:
    DependsOn: FunctionListItemsInCartPermissions
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - FunctionListItemsInCart
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      ResourceId: !Ref CartApiResource
      RestApiId: !Ref AppApi
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
  CartApiRequestPOST:
    DependsOn: FunctionAddToCartPermissions
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - FunctionAddToCart
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      ResourceId: !Ref CartApiResource
      RestApiId: !Ref AppApi
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
  CartApiRequestPUT:
    DependsOn: FunctionUpdateCartPermissions
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: PUT
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - FunctionUpdateCart
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      ResourceId: !Ref CartApiResource
      RestApiId: !Ref AppApi
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
  CartApiRequestDELETE:
    DependsOn: FunctionRemoveFromCartPermissions
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: DELETE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - FunctionRemoveFromCart
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      RequestParameters:
        method.request.path.id: true
      ResourceId: !Ref CartApiResource
      RestApiId: !Ref AppApi
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
  CartApiRequestOPTIONS:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ResourceId: !Ref CartApiResource
      RestApiId: !Ref AppApi
      AuthorizationType: None
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
  CartItemApiRequestGET:
    DependsOn: FunctionGetCartItemPermissions
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - FunctionGetCartItem
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      RequestParameters:
        method.request.path.bookId: true
      ResourceId: !Ref CartItemApiResource
      RestApiId: !Ref AppApi
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
  CartItemApiRequestOPTIONS:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ResourceId: !Ref CartItemApiResource
      RestApiId: !Ref AppApi
      AuthorizationType: None
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
  BestsellersApiRequestGET:
    DependsOn: FunctionGetBestSellersPermissions
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - FunctionGetBestSellers
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      ResourceId: !Ref BestsellersApiResource
      RestApiId: !Ref AppApi
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
  BestsellersApiRequestOPTIONS:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ResourceId: !Ref BestsellersApiResource
      RestApiId: !Ref AppApi
      AuthorizationType: None
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'      
  BooksApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref AppApi
      ParentId: !GetAtt 
        - AppApi
        - RootResourceId
      PathPart: books
  BookItemApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref AppApi
      ParentId: !Ref BooksApiResource
      PathPart: '{id}'
  OrdersApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref AppApi
      ParentId: !GetAtt 
        - AppApi
        - RootResourceId
      PathPart: orders
  CartApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref AppApi
      ParentId: !GetAtt 
        - AppApi
        - RootResourceId
      PathPart: cart
  CartItemApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref AppApi
      ParentId: !Ref CartApiResource
      PathPart: '{bookId}'
  BestsellersApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref AppApi
      ParentId: !GetAtt 
        - AppApi
        - RootResourceId
      PathPart: bestsellers 
  ApiAuthorizer:
    Type: 'AWS::ApiGateway::Authorizer'
    Properties:
      AuthorizerResultTtlInSeconds: 300
      IdentitySource: method.request.header.Authorization
      Name: CognitoDefaultUserPoolAuthorizer
      ProviderARNs: 
        - !Sub '${UserPool}'
      RestApiId: !Ref AppApi
      Type: COGNITO_USER_POOLS
  APIDeployment:
    DependsOn:
      - BooksApiRequestGET
      - BooksApiRequestOPTIONS
      - BookItemApiRequestGET
      - BookItemApiRequestOPTIONS
      - OrdersApiRequestGET
      - OrdersApiRequestPOST
      - OrdersApiRequestOPTIONS
      - CartApiRequestGET
      - CartApiRequestPUT
      - CartApiRequestPOST
      - CartApiRequestDELETE
      - CartApiRequestOPTIONS
      - CartItemApiRequestGET
      - CartItemApiRequestOPTIONS
      - BestsellersApiRequestGET
      - BestsellersApiRequestOPTIONS
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      Description: Prod deployment for API
      RestApiId: !Ref AppApi
      StageName: prod

# ---------- LAMBDA FUNCTIONS for Health Check  ---------          
  FunctionGetTruth:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-GetTruth'
      Description: Get the region name for health check
      Handler: index.handler
      MemorySize: 256
      Role: !GetAtt 
        - DynamoDbRole
        - Arn
      Runtime: nodejs10.x
      Timeout: '60'
      Code:
        S3Bucket: !FindInMap 
          - S3Buckets
          - !Ref 'AWS::Region'
          - Bucket
        S3Key: !FindInMap 
          - Constants
          - S3Keys
          - GetTruthCode 
  TruthApiRequestGET:
    Type: 'AWS::ApiGateway::Method'
    DependsOn: FunctionGetTruthPermissions
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - FunctionGetTruth
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      ResourceId: !Ref TruthApiResource
      RestApiId: !Ref AppApi
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty    
  TruthApiRequestOPTIONS:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ResourceId: !Ref TruthApiResource
      RestApiId: !Ref AppApi
      AuthorizationType: None
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'      
  TruthApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref AppApi
      ParentId: !GetAtt 
        - AppApi
        - RootResourceId
      PathPart: truth 
  
# ---------- COGNITO DEFINITIONS ---------           

  BooksUploader:
    Type: 'Custom::CustomResource'
    Properties:
      ServiceToken: !GetAtt FunctionUploadBooks.Arn
      ParameterOne: Parameter to pass into Custom Lambda Function
      DependsOn: 
       - FunctionUploadBooks

# ------------------------ FRONTEND ------------------------
  AssetsBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref AssetsBucketName
      PolicyDocument:
        Statement:
          - Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${AssetsBucketName}/*'
            Principal:
              CanonicalUser: !GetAtt AssetsBucketOriginAccessIdentity.S3CanonicalUserId
              # both the below won't work - https://github.com/terraform-providers/terraform-provider-aws/issues/10158
              # AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront_Origin_Access_Identity_${AssetsBucketOriginAccessIdentity}'
    DependsOn:
      - AssetsBucketOriginAccessIdentity
  AssetsBucketOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'OriginAccessIdentity for ${AssetsBucketName}'

Outputs:
  ElastiCache:
    Description: ElastiCacheCluster
    Value: ElastiCacheCluster
  
