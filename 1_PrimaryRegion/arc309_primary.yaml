AWSTemplateFormatVersion: 2010-09-09
Parameters:
  ProjectName:
    Description: Name of the project (lowercase and under ten characters without number)
    Type: String
    AllowedPattern: "^[a-z]{0,10}$"
    ConstraintDescription: Must be lowercase and under ten characters (no numbers allowed)
  AssetsBucketName:
    Type: String
    Description: Name of assets S3 bucket to create (lowercase, numbers or - only, S3 Buckets are globally unique)
    AllowedPattern: "^[a-z0-9-]{3,53}$"
    ConstraintDescription: Must be between 3 and 53 characters (lowercase, numbers or -)
  MySubDomain:
    Type: String
    Description: Your subdomain that you created in CDK deployement (eg. team1234.multi-region.xyz)
  CloudfrontACMARNuseast1:
    Type: String
    Description: You ACM certificate ARN for CloudFront in us-east-1 (eg. arn:aws:acm:us-east-1:xxxxx:certificate/xxxx-xxxx-xxxx)
  bookstoreVPC:
    Type: String
    Description: VPC ID of Primary Region (eg. vpc-xxx)
  bookstoreSubnet1:
    Type: String
    Description: Subnet ID for Elasticache (eg.subnet-xxx)
  SeedRepository:
    Type: String
    Description: <Please keep the default value>
    Default: 'http://woof.kopi.io/book10.zip'
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Parameters: 
          - ProjectName
          - AssetsBucketName
          - MySubDomain
          - CloudfrontACMARNuseast1
          - bookstoreVPC
          - bookstoreSubnet1

Conditions:
  IADRegion: !Equals [!Ref "AWS::Region", "us-east-1"]
Mappings:
  S3Buckets:
    ap-southeast-1:
      Bucket: arc309-bookstore-ap-southeast-1
      SeederFunctionBucket: arc309-aws-wildrydes-ap-southeast-1
    eu-west-1:
      Bucket: arc309-bookstore-eu-west-1
      SeederFunctionBucket: arc309-aws-wildrydes-eu-west-1
  Constants:
    S3Keys:
      ListOrdersCode: functions/ListOrders.zip
      GetBookCode: functions/GetBook.zip
      ListBooksCode: functions/ListBooks.zip
      UpdateCartCode: functions/UpdateCart.zip
      GetCartItemCode: functions/GetCartItem.zip
      ListItemsInCartCode: functions/ListItemsInCart.zip
      AddToCartCode: functions/AddToCart.zip
      RemoveFromCartCode: functions/RemoveFromCart.zip
      GetBestSellersCode: functions/GetBestSellers.zip
      CheckoutCode: functions/Checkout.zip
      UpdateBestSellersCode: functions/UpdateBestSellers.zip
      booksData: data/books.json
      UpdateConfigCode: functions/UpdateConfig.zip
      SeederFunctionCode: aws-serverless-codecommit-seeder.zip
      GetTruthCode: functions/myregion.zip
Resources:
  bookstoreSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub '${ProjectName}-SG'
      GroupDescription: Lock cache down to webserver access only
      VpcId: !Ref bookstoreVPC

  redisLambdaSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId:
        Ref: bookstoreVPC
      GroupDescription: "A component security group allowing access only to redis"  

  bookstoreCacheSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Elasticache security group
      SecurityGroupIngress:
        -
          IpProtocol: "tcp"
          FromPort: "6379"
          ToPort: "6379"
          SourceSecurityGroupId:
            Ref: redisLambdaSecurityGroup
      VpcId: !Ref bookstoreVPC

  bookstoreCacheSubnets:
    Type: 'AWS::ElastiCache::SubnetGroup'
    Properties:
      Description: Subnets for ElastiCache
      SubnetIds:
        - Ref: bookstoreSubnet1        

# ---------- ROLES FOR DYNAMODB ---------
  DynamoDbRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectName}-DynamoDbLambda'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess'
      Policies:
        - PolicyName: PutRidePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateTable'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:DeleteItem'
                Resource: 
                  - !GetAtt 
                    - TBooks
                    - Arn
                  - !GetAtt 
                    - TOrders
                    - Arn
                  - !GetAtt 
                    - TCart
                    - Arn
                  - !Join 
                    - ''
                    - - !GetAtt 
                        - TBooks
                        - Arn
                      - /*

# ---------- DYNAMODB TABLES DEFINITIONS ---------
  TBooks:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub '${ProjectName}-Books'
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: category
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      # ProvisionedThroughput:
      #   ReadCapacityUnits: 1
      #   WriteCapacityUnits: 1
      GlobalSecondaryIndexes:
        - IndexName: category-index
          KeySchema:
            - AttributeName: category
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          # BillingMode: PAY_PER_REQUEST
          # ProvisionedThroughput:
          #   ReadCapacityUnits: 1
          #   WriteCapacityUnits: 1
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  TOrders:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub '${ProjectName}-Orders'
      AttributeDefinitions:
        - AttributeName: customerId
          AttributeType: S
        - AttributeName: orderId
          AttributeType: S
      KeySchema:
        - AttributeName: customerId
          KeyType: HASH
        - AttributeName: orderId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      # ProvisionedThroughput:
      #   ReadCapacityUnits: 1
      #   WriteCapacityUnits: 1
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES  
  TCart:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub '${ProjectName}-Cart'
      AttributeDefinitions:
        - AttributeName: customerId
          AttributeType: S
        - AttributeName: bookId
          AttributeType: S
      KeySchema:
        - AttributeName: customerId
          KeyType: HASH
        - AttributeName: bookId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      # ProvisionedThroughput:
      #   ReadCapacityUnits: 1
      #   WriteCapacityUnits: 1
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES  

# ---------- ROLES FOR ELASTICACHE ---------  
  RedisRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectName}-RedisRole'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonElastiCacheFullAccess'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - 'arn:aws:iam::aws:policy/AWSLambdaInvocation-DynamoDB'

# ---------- ELASTICACHE DEFINITIONS ---------         
  ElastiCacheCluster:
    DependsOn: 
     - bookstoreCacheSubnets
     - bookstoreCacheSecurityGroup
    Type: 'AWS::ElastiCache::CacheCluster'
    Properties:
      ClusterName: !Sub '${ProjectName}-cluster'
      CacheNodeType: cache.t2.micro
      NumCacheNodes: '1'
      Engine: redis
      CacheSubnetGroupName: !Ref bookstoreCacheSubnets
      VpcSecurityGroupIds:
        - Fn::GetAtt:
          - bookstoreCacheSecurityGroup
          - 'GroupId'
        
# ---------- LAMBDA STREAMING FUNCTIONS ---------      
  FunctionUpdateBestSellers:
    Type: 'AWS::Lambda::Function'
    DependsOn:
      - RedisRole
      - ElastiCacheCluster
      - TOrders
    Properties:
      FunctionName: !Sub '${ProjectName}-UpdateBestSellers'
      Description: 'Updates BestSellers as orders are placed'
      Handler: index.handler
      Role: !GetAtt 
        - RedisRole
        - Arn
      Runtime: nodejs10.x
      Timeout: '60'
      VpcConfig:
        SecurityGroupIds:
          - Ref: redisLambdaSecurityGroup
        SubnetIds: 
          - Ref: bookstoreSubnet1
      Code:
        S3Bucket: !FindInMap 
          - S3Buckets
          - !Ref 'AWS::Region'
          - Bucket
        S3Key: !FindInMap 
          - Constants
          - S3Keys
          - UpdateBestSellersCode
      Environment:
        Variables:
          URL: !GetAtt 
            - ElastiCacheCluster
            - RedisEndpoint.Address 

 # ----------  STREAMING TRIGGERS ---------                     
  OrderTableStream:
    DependsOn: TOrders
    Type: 'AWS::Lambda::EventSourceMapping'
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt 
        - TOrders
        - StreamArn
      FunctionName: !GetAtt 
        - FunctionUpdateBestSellers
        - Arn
      StartingPosition: TRIM_HORIZON   

# ---------- LAMBDA for DYNAMODB FUNCTIONS ---------         
  FunctionListOrders:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-ListOrders'
      Description: Get list of books ordered by customerId
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs10.x
      Role: !GetAtt 
        - DynamoDbRole
        - Arn
      Timeout: 120
      Environment:
        Variables:
          TABLE_NAME: !Sub '${ProjectName}-Orders'
      Code:
        S3Bucket: !FindInMap 
          - S3Buckets
          - !Ref 'AWS::Region'
          - Bucket
        S3Key: !FindInMap 
          - Constants
          - S3Keys
          - ListOrdersCode
  FunctionGetBook:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-GetBook'
      Description: Get book by id
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs10.x
      Role: !GetAtt 
        - DynamoDbRole
        - Arn
      Timeout: 120
      Environment:
        Variables:
          TABLE_NAME: !Sub '${ProjectName}-Books'
      Code:
        S3Bucket: !FindInMap 
          - S3Buckets
          - !Ref 'AWS::Region'
          - Bucket
        S3Key: !FindInMap 
          - Constants
          - S3Keys
          - GetBookCode
  FunctionListBooks:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-ListBooks'
      Description: Get list of books by category
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs10.x
      Role: !GetAtt 
        - DynamoDbRole
        - Arn
      Timeout: 120
      Environment:
        Variables:
          TABLE_NAME: !Sub '${ProjectName}-Books'
      Code:
        S3Bucket: !FindInMap 
          - S3Buckets
          - !Ref 'AWS::Region'
          - Bucket
        S3Key: !FindInMap 
          - Constants
          - S3Keys
          - ListBooksCode
  FunctionUpdateCart:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-UpdateCart'
      Description: Update Customer's cart
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs10.x
      Role: !GetAtt 
        - DynamoDbRole
        - Arn
      Timeout: 120
      Environment:
        Variables:
          TABLE_NAME: !Sub '${ProjectName}-Cart'
      Code:
        S3Bucket: !FindInMap 
          - S3Buckets
          - !Ref 'AWS::Region'
          - Bucket
        S3Key: !FindInMap 
          - Constants
          - S3Keys
          - UpdateCartCode
  FunctionGetCartItem:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-GetCartItem'
      Description: Get item in cart by customer and book id
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs10.x
      Role: !GetAtt 
        - DynamoDbRole
        - Arn
      Timeout: 120
      Environment:
        Variables:
          TABLE_NAME: !Sub '${ProjectName}-Cart'
      Code:
        S3Bucket: !FindInMap 
          - S3Buckets
          - !Ref 'AWS::Region'
          - Bucket
        S3Key: !FindInMap 
          - Constants
          - S3Keys
          - GetCartItemCode
  FunctionListItemsInCart:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-ListOrdersInCart'
      Description: Get list of items in cart
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs10.x
      Role: !GetAtt 
        - DynamoDbRole
        - Arn
      Timeout: 120
      Environment:
        Variables:
          TABLE_NAME: !Sub '${ProjectName}-Cart'
      Code:
        S3Bucket: !FindInMap 
          - S3Buckets
          - !Ref 'AWS::Region'
          - Bucket
        S3Key: !FindInMap 
          - Constants
          - S3Keys
          - ListItemsInCartCode
  FunctionAddToCart:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-AddToCart'
      Description: Add a book to cart
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs10.x
      Role: !GetAtt 
        - DynamoDbRole
        - Arn
      Timeout: 120
      Environment:
        Variables:
          TABLE_NAME: !Sub '${ProjectName}-Cart'
      Code:
        S3Bucket: !FindInMap 
          - S3Buckets
          - !Ref 'AWS::Region'
          - Bucket
        S3Key: !FindInMap 
          - Constants
          - S3Keys
          - AddToCartCode
  FunctionRemoveFromCart:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-RemoveFromCart'
      Description: Remove a book from cart
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs10.x
      Role: !GetAtt 
        - DynamoDbRole
        - Arn
      Timeout: 120
      Environment:
        Variables:
          TABLE_NAME: !Sub '${ProjectName}-Cart'
      Code:
        S3Bucket: !FindInMap 
          - S3Buckets
          - !Ref 'AWS::Region'
          - Bucket
        S3Key: !FindInMap 
          - Constants
          - S3Keys
          - RemoveFromCartCode
  FunctionCheckout:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-Checkout'
      Description: Get list of books ordered by customerId
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs10.x
      Role: !GetAtt 
        - DynamoDbRole
        - Arn
      Timeout: 120
      Environment:
        Variables:
          ORDERS_TABLE: !Sub '${ProjectName}-Orders'
          CART_TABLE: !Sub '${ProjectName}-Cart'
      Code:
        S3Bucket: !FindInMap 
          - S3Buckets
          - !Ref 'AWS::Region'
          - Bucket
        S3Key: !FindInMap 
          - Constants
          - S3Keys
          - CheckoutCode

# ---------- LAMBDA FUNCTIONS for ELASTICACHE  ---------          
  FunctionGetBestSellers:
    Type: 'AWS::Lambda::Function'
    DependsOn:
      - RedisRole
      - ElastiCacheCluster
      - TOrders
    Properties:
      FunctionName: !Sub '${ProjectName}-GetBestSellers'
      Description: Get the top 20 best selling books from ElastiCache
      Handler: index.handler
      MemorySize: 256
      Role: !GetAtt
        - RedisRole
        - Arn
      Runtime: nodejs10.x
      Timeout: '60'
      VpcConfig:
        SecurityGroupIds:
          - Ref: redisLambdaSecurityGroup
        SubnetIds:
          - Ref: bookstoreSubnet1
      Code:
        S3Bucket: !FindInMap 
          - S3Buckets
          - !Ref 'AWS::Region'
          - Bucket
        S3Key: !FindInMap 
          - Constants
          - S3Keys
          - GetBestSellersCode
      Environment:
        Variables:
          URL: !GetAtt 
            - ElastiCacheCluster
            - RedisEndpoint.Address          

# ---------- LAMBDA FUNCTIONS for Health Check  ---------          
  FunctionGetTruth:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-GetTruth'
      Description: Get the region name for health check
      Handler: index.handler
      MemorySize: 256
      Role:
        'Fn::GetAtt':
          - SeederRole
          - Arn
      Runtime: nodejs10.x
      Timeout: '60'
      Code:
        S3Bucket: !FindInMap 
          - S3Buckets
          - !Ref 'AWS::Region'
          - Bucket
        S3Key: !FindInMap 
          - Constants
          - S3Keys
          - GetTruthCode 

 # ---------- LAMBDA PERMISSIONS ---------    
  FunctionListOrdersPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref FunctionListOrders
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref AppApi
          - /*
  FunctionGetBookPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref FunctionGetBook
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref AppApi
          - /*
  FunctionListBooksPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref FunctionListBooks
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref AppApi
          - /*
  FunctionUpdateCartPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref FunctionUpdateCart
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref AppApi
          - /*
  FunctionGetCartItemPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref FunctionGetCartItem
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref AppApi
          - /*
  FunctionListItemsInCartPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref FunctionListItemsInCart
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref AppApi
          - /*
  FunctionAddToCartPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref FunctionAddToCart
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref AppApi
          - /*
  FunctionRemoveFromCartPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref FunctionRemoveFromCart
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref AppApi
          - /*
  FunctionCheckoutPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref FunctionCheckout
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref AppApi
          - /*
  FunctionGetBestSellersPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref FunctionGetBestSellers
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref AppApi
          - /*
  FunctionGetTruthPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref FunctionGetTruth
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref AppApi
          - /*

 # ---------- API GATEWAY ---------         
  AppApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Sub '${ProjectName}-Bookstore'
      Description: API used for Bookstore requests
      FailOnWarnings: true
  BooksApiRequestGET:
    DependsOn:
      - FunctionListOrdersPermissions
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - FunctionListBooks
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      RequestParameters:
        method.request.querystring.category: false
      ResourceId: !Ref BooksApiResource
      RestApiId: !Ref AppApi
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
  BooksApiRequestOPTIONS:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ResourceId: !Ref BooksApiResource
      RestApiId: !Ref AppApi
      AuthorizationType: None
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
  BookItemApiRequestGET:
    DependsOn: FunctionGetBookPermissions
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - FunctionGetBook
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: $input.json('$.body')
      RequestParameters:
        method.request.path.id: true
      ResourceId: !Ref BookItemApiResource
      RestApiId: !Ref AppApi
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
  BookItemApiRequestOPTIONS:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ResourceId: !Ref BookItemApiResource
      RestApiId: !Ref AppApi
      AuthorizationType: None
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
  OrdersApiRequestGET:
    DependsOn: FunctionListOrdersPermissions
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - FunctionListOrders
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      ResourceId: !Ref OrdersApiResource
      RestApiId: !Ref AppApi
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
  OrdersApiRequestPOST:
    DependsOn: FunctionCheckoutPermissions
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - FunctionCheckout
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      ResourceId: !Ref OrdersApiResource
      RestApiId: !Ref AppApi
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
  OrdersApiRequestOPTIONS:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ResourceId: !Ref OrdersApiResource
      RestApiId: !Ref AppApi
      AuthorizationType: None
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
  CartApiRequestGET:
    DependsOn: FunctionListItemsInCartPermissions
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - FunctionListItemsInCart
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      ResourceId: !Ref CartApiResource
      RestApiId: !Ref AppApi
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
  CartApiRequestPOST:
    DependsOn: FunctionAddToCartPermissions
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - FunctionAddToCart
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      ResourceId: !Ref CartApiResource
      RestApiId: !Ref AppApi
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
  CartApiRequestPUT:
    DependsOn: FunctionUpdateCartPermissions
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: PUT
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - FunctionUpdateCart
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      ResourceId: !Ref CartApiResource
      RestApiId: !Ref AppApi
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
  CartApiRequestDELETE:
    DependsOn: FunctionRemoveFromCartPermissions
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: DELETE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - FunctionRemoveFromCart
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      RequestParameters:
        method.request.path.id: true
      ResourceId: !Ref CartApiResource
      RestApiId: !Ref AppApi
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
  CartApiRequestOPTIONS:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ResourceId: !Ref CartApiResource
      RestApiId: !Ref AppApi
      AuthorizationType: None
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
  CartItemApiRequestGET:
    DependsOn: FunctionGetCartItemPermissions
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - FunctionGetCartItem
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      RequestParameters:
        method.request.path.bookId: true
      ResourceId: !Ref CartItemApiResource
      RestApiId: !Ref AppApi
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
  CartItemApiRequestOPTIONS:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ResourceId: !Ref CartItemApiResource
      RestApiId: !Ref AppApi
      AuthorizationType: None
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
  BestsellersApiRequestGET:
    DependsOn: FunctionGetBestSellersPermissions
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - FunctionGetBestSellers
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      ResourceId: !Ref BestsellersApiResource
      RestApiId: !Ref AppApi
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
  BestsellersApiRequestOPTIONS:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ResourceId: !Ref BestsellersApiResource
      RestApiId: !Ref AppApi
      AuthorizationType: None
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'      
  BooksApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref AppApi
      ParentId: !GetAtt 
        - AppApi
        - RootResourceId
      PathPart: books
  BookItemApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref AppApi
      ParentId: !Ref BooksApiResource
      PathPart: '{id}'
  OrdersApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref AppApi
      ParentId: !GetAtt 
        - AppApi
        - RootResourceId
      PathPart: orders
  CartApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref AppApi
      ParentId: !GetAtt 
        - AppApi
        - RootResourceId
      PathPart: cart
  CartItemApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref AppApi
      ParentId: !Ref CartApiResource
      PathPart: '{bookId}'
  BestsellersApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref AppApi
      ParentId: !GetAtt 
        - AppApi
        - RootResourceId
      PathPart: bestsellers 
  ApiAuthorizer:
    Type: 'AWS::ApiGateway::Authorizer'
    Properties:
      AuthorizerResultTtlInSeconds: 300
      IdentitySource: method.request.header.Authorization
      Name: CognitoDefaultUserPoolAuthorizer
      ProviderARNs:
        - !GetAtt 
          - UserPool
          - Arn
      RestApiId: !Ref AppApi
      Type: COGNITO_USER_POOLS
  APIDeployment:
    DependsOn:
      - BooksApiRequestGET
      - BooksApiRequestOPTIONS
      - BookItemApiRequestGET
      - BookItemApiRequestOPTIONS
      - OrdersApiRequestGET
      - OrdersApiRequestPOST
      - OrdersApiRequestOPTIONS
      - CartApiRequestGET
      - CartApiRequestPUT
      - CartApiRequestPOST
      - CartApiRequestDELETE
      - CartApiRequestOPTIONS
      - CartItemApiRequestGET
      - CartItemApiRequestOPTIONS
      - BestsellersApiRequestGET
      - BestsellersApiRequestOPTIONS
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      Description: Prod deployment for API
      RestApiId: !Ref AppApi
      StageName: prod
  TruthApiRequestGET:
    Type: 'AWS::ApiGateway::Method'
    DependsOn: FunctionGetTruthPermissions
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - FunctionGetTruth
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      ResourceId: !Ref TruthApiResource
      RestApiId: !Ref AppApi
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty    
  TruthApiRequestOPTIONS:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ResourceId: !Ref TruthApiResource
      RestApiId: !Ref AppApi
      AuthorizationType: None
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'      
  TruthApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref AppApi
      ParentId: !GetAtt 
        - AppApi
        - RootResourceId
      PathPart: truth 
    
# ---------- COGNITO DEFINITIONS ---------           
  SNSRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cognito-idp.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: CognitoSNSPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'sns:publish'
                Resource: '*'
  UserPool:
    Type: 'AWS::Cognito::UserPool'
    Properties:
      UserPoolName: !Sub '${ProjectName}-user-pool'
      UsernameAttributes:
        - email
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
        InviteMessageTemplate:
          EmailMessage: 'Your username is {username} and temporary password is {####}. '
          EmailSubject: Your temporary password
          SMSMessage: 'Your username is {username} and temporary password is {####}.'
        UnusedAccountValidityDays: 7
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
      AutoVerifiedAttributes:
        - email
      EmailVerificationMessage: 'Here is your verification code: {####}'
      EmailVerificationSubject: Your verification code
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
  UserPoolClient:
    Type: 'AWS::Cognito::UserPoolClient'
    Properties:
      ClientName: !Sub '${ProjectName}-client'
      GenerateSecret: false
      UserPoolId: !Ref UserPool
  IdentityPool:
    Type: 'AWS::Cognito::IdentityPool'
    Properties:
      IdentityPoolName: !Sub '${ProjectName}Identity'
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt 
            - UserPool
            - ProviderName
  CognitoUnAuthorizedRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': unauthenticated
      Policies:
        - PolicyName: CognitoUnauthorizedPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'mobileanalytics:PutEvents'
                  - 'cognito-sync:*'
                Resource: '*'
  CognitoAuthorizedRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
        - PolicyName: CognitoAuthorizedPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'mobileanalytics:PutEvents'
                  - 'cognito-sync:*'
                  - 'cognito-identity:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'execute-api:Invoke'
                Resource: !Join 
                  - ''
                  - - 'arn:aws:execute-api:*:'
                    # - !Ref 'AWS::Region'
                    # - ':'
                    - !Ref 'AWS::AccountId'
                    - ':*/*'
                    # - !Ref AppApi
                    # - /*
  IdentityPoolRoleMapping:
    Type: 'AWS::Cognito::IdentityPoolRoleAttachment'
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt 
          - CognitoAuthorizedRole
          - Arn
        unauthenticated: !GetAtt 
          - CognitoUnAuthorizedRole
          - Arn

# ------------------------ FRONTEND ------------------------
  AssetsCodeRepository:
    Type: 'AWS::CodeCommit::Repository'
    Properties:
      RepositoryDescription: Code repository for web application
      RepositoryName: !Sub '${ProjectName}-WebAssets'
  AssetsBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref AssetsBucketName
      AccessControl: Private
      MetricsConfigurations:
        - Id: EntireBucket
      VersioningConfiguration: 
        Status: Enabled
      WebsiteConfiguration:
        IndexDocument: index.html
  AssetsBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref AssetsBucketName
      PolicyDocument:
        Statement:
          - Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${AssetsBucketName}/*'
            Principal:
              CanonicalUser: !GetAtt AssetsBucketOriginAccessIdentity.S3CanonicalUserId
    DependsOn:
      - AssetsBucketOriginAccessIdentity
  AssetsBucketOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'OriginAccessIdentity for ${AssetsBucketName}'
  AssetsCDN:
    Type: 'AWS::CloudFront::Distribution'
    DependsOn:
      - AssetsBucketOriginAccessIdentity
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: !Sub 'CDN for ${AssetsBucketName}'
        DefaultRootObject: index.html
        Origins:
          - DomainName: !Join
              - ''
              - - !Sub '${AssetsBucketName}.s3'
                - !If [IADRegion, '', !Sub '-${AWS::Region}']
                - '.amazonaws.com'
            Id: S3
            S3OriginConfig:
              OriginAccessIdentity: !Sub >-
                origin-access-identity/cloudfront/${AssetsBucketOriginAccessIdentity}
        Aliases: 
          - !Ref MySubDomain
        ViewerCertificate:
          AcmCertificateArn: !Ref CloudfrontACMARNuseast1  
          SslSupportMethod: sni-only
        DefaultCacheBehavior:
          TargetOriginId: S3
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: 'false'
        CustomErrorResponses:   #fix firefox problem.
          - ErrorCachingMinTTL: 300
            ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
            
  CodeBuildRole:
    Description: Creating service role in IAM for AWS CodeBuild
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectName}-codebuild-role'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: codebuild-policy
          PolicyDocument:
            Statement:
              - Action:
                  - 's3:PutObject'
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:GetBucketVersioning'
                Resource:
                  - !Join 
                    - ''
                    - - !GetAtt AssetsBucket.Arn
                      - /*
                  - !Join 
                    - ''
                    - - !GetAtt PipelineArtifactsBucket.Arn
                      - /*
                Effect: Allow
        - PolicyName: codebuild-logs
          PolicyDocument:
            Statement:
              - Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:CreateLogGroup'
                  - 'cloudfront:CreateInvalidation'
                Resource: '*'
                Effect: Allow
      Path: /
  CodePipelineRole:
    Description: Creating service role in IAM for AWS CodePipeline
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectName}-CodePipeline-Role'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: codecommit-for-codepipeline
          PolicyDocument:
            Statement:
              - Action:
                  - 'codecommit:GetBranch'
                  - 'codecommit:GetCommit'
                  - 'codecommit:UploadArchive'
                  - 'codecommit:GetUploadArchiveStatus'
                  - 'codecommit:CancelUploadArchive'
                Resource: !GetAtt AssetsCodeRepository.Arn
                Effect: Allow
        - PolicyName: artifacts-for-pipeline
          PolicyDocument:
            Statement:
              - Action:
                  - 's3:PutObject'
                  - 's3:GetObject'
                Resource:
                  'Fn::Join':
                    - ''
                    - - 'Fn::GetAtt':
                        - PipelineArtifactsBucket
                        - Arn
                      - /*
                Effect: Allow
        - PolicyName: codebuild-for-pipeline
          PolicyDocument:
            Statement:
              - Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
                Resource: !GetAtt 
                  - CodeBuildProject
                  - Arn
                Effect: Allow
      Path: /
  PipelineArtifactsBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${AssetsBucketName}-pipeline'
      AccessControl: Private
  CodeBuildProject:
    DependsOn:
      - PipelineArtifactsBucket
    Description: Creating AWS CodeBuild project
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Description: !Sub 'Building stage for ${ProjectName}.'
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: S3_BUCKET
            Value: !Ref PipelineArtifactsBucket
        Image: 'aws/codebuild/standard:2.0'
        Type: LINUX_CONTAINER
      Name: !Sub '${ProjectName}-build'
      ServiceRole: !Ref CodeBuildRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          phases:
            install:
              runtime-versions:
                nodejs: 10
            pre_build:
              commands:
                - echo Installing NPM dependencies...
                - npm install
            build:
              commands:
                - npm run build
            post_build:
              commands:
                - echo Uploading to AssetsBucket 
                - aws s3 cp --recursive ./build s3://${AssetsBucketName}/ 
                - aws s3 cp --cache-control="max-age=0, no-cache, no-store, must-revalidate" ./build/service-worker.js s3://${AssetsBucket}/
                - aws s3 cp --cache-control="max-age=0, no-cache, no-store, must-revalidate" ./build/index.html s3://${AssetsBucket}/
                - aws cloudfront create-invalidation --distribution-id ${AssetsCDN} --paths /index.html /service-worker.js
          artifacts:
            files:
              - '**/*'
            base-directory: build        
      Tags:
        - Key: app-name
          Value: !Ref ProjectName
      TimeoutInMinutes: 5
  AssetsCodePipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      Name: !Sub '${ProjectName}-Assets-Pipeline'
      RoleArn: !GetAtt 
        - CodePipelineRole
        - Arn
      ArtifactStore:
        Location: !Sub '${AssetsBucketName}-pipeline'
        Type: S3
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              InputArtifacts: []
              ActionTypeId:
                Version: '1'
                Category: Source
                Owner: AWS
                Provider: CodeCommit
              Configuration:
                BranchName: master
                RepositoryName: !Sub '${ProjectName}-WebAssets'
              OutputArtifacts:
                - Name: !Sub '${ProjectName}-SourceArtifact'
        - Name: Build
          Actions:
            - Name: build-and-deploy
              InputArtifacts:
                - Name: !Sub '${ProjectName}-SourceArtifact'
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              OutputArtifacts:
                - Name: !Sub '${ProjectName}-BuildArtifact'
              Configuration:
                ProjectName: !Sub '${ProjectName}-build'
              RunOrder: 1
    DependsOn:
      - PipelineArtifactsBucket
  SeederFunction:
    Properties:
      Code:
        S3Bucket: !FindInMap
          - S3Buckets
          - !Ref 'AWS::Region'
          - SeederFunctionBucket
        S3Key: !FindInMap
         - Constants
         - S3Keys
         - SeederFunctionCode
      Description: CodeCommit repository seeder
      Handler: seeder.SeedRepositoryHandler
      MemorySize: 3008
      Role:
        'Fn::GetAtt':
          - SeederRole
          - Arn
      Runtime: java8
      Timeout: 900
    Type: 'AWS::Lambda::Function'
    DependsOn:
      - AssetsCodeRepository
  UpdateConfigFunction:
    Properties:
      Code:
        S3Bucket: !FindInMap
          - S3Buckets
          - !Ref 'AWS::Region'
          - Bucket
        S3Key: !FindInMap
          - Constants
          - S3Keys
          - UpdateConfigCode
      Description: Update config for CodeCommit repository
      Handler: index.handler
      Role:
        'Fn::GetAtt':
          - SeederRole
          - Arn
      Runtime: nodejs10.x
      Timeout: 300
      Environment:
        Variables:
          API_URL: !Sub 'https://${AppApi}.execute-api.${AWS::Region}.amazonaws.com/prod'
          BRANCH_NAME: master
          REGION: !Ref 'AWS::Region'
          REPOSITORY_NAME: !Sub '${ProjectName}-WebAssets'
          USER_POOL_ID: !Ref UserPool
          APP_CLIENT_ID: !Ref UserPoolClient
          IDENTITY_POOL_ID: !Ref IdentityPool
    Type: 'AWS::Lambda::Function'
    DependsOn:
      - AssetsCodeRepository
      - SeederFunction
      - RepositorySeeder
      - AppApi
      - UserPool
      - UserPoolClient
      - IdentityPool
  SeederRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'codecommit:GetRepository'
                  - 'codecommit:GitPush'
                  - 'codecommit:GetBranch'
                  - 'codecommit:PutFile'
                Effect: Allow
                Resource: !GetAtt AssetsCodeRepository.Arn
            Version: 2012-10-17
          PolicyName: SeederRolePolicy
        - PolicyDocument:
            Statement:
              - Action:
                  - 'logs:*'
                Effect: Allow
                Resource: 'arn:aws:logs:*:*:*'
            Version: 2012-10-17
          PolicyName: LogsPolicy
    Type: 'AWS::IAM::Role'
  RepositorySeeder:
    Properties:
      ServiceToken:
        'Fn::GetAtt':
          - SeederFunction
          - Arn
      sourceUrl: !Ref SeedRepository
      targetRepositoryName: !Sub '${ProjectName}-WebAssets'
      targetRepositoryRegion: '${AWS::Region}'
    Type: 'Custom::RepositorySeeder'
  RepositoryUpdater:
    Type: 'Custom::CustomResource'
    Properties:
      ServiceToken: !GetAtt UpdateConfigFunction.Arn
      ParameterOne: Parameter to pass into Custom Lambda Function
      DependsOn: UpdateConfigFunction

# ---------- ROLES FOR S3 Relication ---------  
  S3replicationRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectName}-S3replicationRole'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - s3.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: replicationRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObjectVersionForReplication'
                  - 's3:GetObjectVersionAcl'
                Resource:
                  - !Join 
                    - ''
                    - - !GetAtt AssetsBucket.Arn
                      - /*
            Statement:
              - Effect: Allow
                Action:
                  - 's3:ListBucket'
                  - 's3:GetReplicationConfiguration'
                Resource: !GetAtt AssetsBucket.Arn
            Statement:
              - Effect: Allow
                Action:
                  - 's3:ReplicateObject'
                  - 's3:ReplicateDelete'
                  - 's3:ReplicateTags'
                  - 's3:GetObjectVersionTagging'
                Resource: !Sub 'arn:aws:s3:::${AssetsBucketName}-region2/*'

Outputs:
  WebApplication:
    Description: The URL for the web application
    Export:
      Name: !Sub '${ProjectName}WebApp'
    Value: !Sub
      - https://${Domain}
      - { Domain: !GetAtt AssetsCDN.DomainName }
  S3replicationRole: 
    Description: The ARN of S3 repliction role
    Value: !GetAtt S3replicationRole.Arn
  UserPool:
    Description: The ARN of Cognito UserPool Arn
    Value: !GetAtt UserPool.Arn
  
